// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$footer-img2-name: 'footer_img2'
$footer-img2-x: 0px
$footer-img2-y: 42px
$footer-img2-offset-x: 0px
$footer-img2-offset-y: -42px
$footer-img2-width: 43px
$footer-img2-height: 25px
$footer-img2-total-width: 161px
$footer-img2-total-height: 67px
$footer-img2-image: '../images/sprites.png'
$footer-img2: (0px, 42px, 0px, -42px, 43px, 25px, 161px, 67px, '../images/sprites.png', 'footer_img2', )
$footer-img3-name: 'footer_img3'
$footer-img3-x: 45px
$footer-img3-y: 42px
$footer-img3-offset-x: -45px
$footer-img3-offset-y: -42px
$footer-img3-width: 41px
$footer-img3-height: 25px
$footer-img3-total-width: 161px
$footer-img3-total-height: 67px
$footer-img3-image: '../images/sprites.png'
$footer-img3: (45px, 42px, -45px, -42px, 41px, 25px, 161px, 67px, '../images/sprites.png', 'footer_img3', )
$logo-header-name: 'logo_header'
$logo-header-x: 0px
$logo-header-y: 0px
$logo-header-offset-x: 0px
$logo-header-offset-y: 0px
$logo-header-width: 161px
$logo-header-height: 40px
$logo-header-total-width: 161px
$logo-header-total-height: 67px
$logo-header-image: '../images/sprites.png'
$logo-header: (0px, 0px, 0px, 0px, 161px, 40px, 161px, 67px, '../images/sprites.png', 'logo_header', )
$spritesheet-width: 161px
$spritesheet-height: 67px
$spritesheet-image: '../images/sprites.png'
$spritesheet-sprites: ($footer-img2, $footer-img3, $logo-header, )
$spritesheet: (161px, 67px, '../images/sprites.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)
